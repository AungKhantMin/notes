Why cloud
    Global in minutes (deploy in different locations)
    Focus on business differentiations
    Economies of scale
    Increase speed and agility
    Stop guessing capacity
    Click and go, no need to ship pc

Each region is an independent set of data centres.

*Availability zones*: interconnected data centres within the same region isolated from failures. They are connected with low latency network.

*Hybrid deployment*: mix of cloud and on premises.

You can achieve high availability by deploying the data/components in two availability zones within the same region

Accessing AWS
    Console
    Cli
    Sdk


Elastic load balancing
    Distributed load across multiple ec2 instances


*Elastic beanstalk*: easiest way to get a web app running on AWS. Handles lid balancing, resource provisioning.

*Amazon private cloud (vpc)*: allows launching AWS resources in virtual networks. You can define sub networks, gateways and route tables.

*AWS direct connect*: dedicated network from organizations to AWS.

*Amazon route 53*: dns web service. You can register your domain names and resolve.

*Amazon simple storage service (s3)*: data storage, access through http.

*Amazon glacier*: low cost storage for archiving and long term backup.

*Amazon elastic block store (EBS)*: block level volumes for ec2 instances.

*AWS storage gateway*: allows connecting on premises devices with AWS storage solutions.

*Cloud Front*: CDN, delivers dynamic and static and streaming content from a global network of edge locations.

Database services:

*Amazon relational database service (RDS)*: secure, high available, production ready, fault toulerant, db. Provides replications and scalability.

*DynamiDB*: nosql db for low latency apps at any scale. Supports document and key value models.

*Redshift*: petabyte scale data warehouse, standard sql interface

*Elastic cache*: in memory cache.

*Cloud watch*: monitoring service, collects and tracks metrics

*Cloud formation*: Json templating language to describe AWS resources

*CloudTrail*: récords api calls and delivers log files for review and audit.

*AWS config*: provides resource inventory and configuration history.

Security and identity:

*Identity and access management (Iam)*: creation of users and groups and use permissions to allow and deny access to their AWS.

*Key management service (kms)*: creates and controlles encryption keys. Integrates with other services to encrypt data.

*Directory service*: set up and run Microsoft active directory.

*Certificate manager*: provisions, manages and deploys tls certificates.

*Web application firewall*: blocks malicious traffic.

*API gateway*: Makes it easy to create and deploy apis.

*Elastic transcoder*: media transcoder in the cloud.

*Simple notification system (SNS)*: producer subscriber system to send messages and consume data.

*Simple email service (SES)*: system to send emails.

*Simple workflow service (SWF)*: system to execute tasks, if one fail it reruns.

*Simple queue service (SQS)*: cost effective queue.

S3 common use cases:

backup and archive

Content and media distribution

Big data analysis

Static website hosting

Disaster recovery

Data reside in buckets

Each bucket unlimited objects

You don’t have to worry about storage limits or capacity planning or durability

Each bucket is in one region

Max obj size 5tb

Each object has metadata associated

Each object is identified with a key

Rest api with crud (create read update delete)

*Reduced redundancy storage*: cheaper price less redundancy

Eventual consistency for updated data and read after write for new one.



*Access control*: iam policies, query string auth and s3 bucket policies.

Good for frequently accesse data.

You can use prefixes for object hiracy aggregation.

*Infrequent access*: policy cheaper and leas bandwidth.



You can set lifecycle rules so infrequently used data is moved to cheaper policies

You can turn on versioning if objects

*MFA delete*: deleting an object requires an extra token.

*Cross region replication*: async replicate all objects to another region. Good for lower latency

*Logging*: logs requests.

Events notifications can be sent after events such as upload. Can be sent to an sqs, sns, or a lambda.

